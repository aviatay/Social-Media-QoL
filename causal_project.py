# -*- coding: utf-8 -*-
"""causal project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kXLqpIHTEouK4E714ePVV2vYGPRNLs2V
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import NearestNeighbors
from statsmodels.stats.weightstats import DescrStatsW

import statsmodels.api as sm
from statsmodels.stats.outliers_influence import summary_table

df = pd.read_csv('/content/Mental Health Social Media Dataset.csv')
df.columns = ['timestamp', 'age', 'gender', 'relationship status', 'occupation status', 'education', 'use social media', 'sm platform',
                'avg time', 'no purpose', 'distraction', 'restless', 'easily distract', 'worried', 'concentrate diff', 'comparing',
                'comparisons feels', 'media validation', 'depression', 'activities', 'sleeping problems']

df = df[df['use social media'] == 'Yes']
df = df[df['age'] < 91]
selec_df = df[['timestamp', 'age', 'gender', 'relationship status', 'occupation status',
                'avg time', 'depression', 'activities', 'sleeping problems']]

age_range = ['10-19', '20-29', '30-39', '40-49', '50-59', '60-69']
age_range_col = []
gender_col = []
using_time = []
exposure_time = []
relationship = []
occupation = []

for val in selec_df.age:
  if 13 <= val <= 19:
    age_range_col.append('10-19')
  elif 20 <= val <= 29:
    age_range_col.append('20-29')
  elif 30 <= val <= 39:
    age_range_col.append('30-39')
  elif 40 <= val <= 49:
    age_range_col.append('40-49')
  elif 50 <= val <= 59:
    age_range_col.append('50-59')
  elif 60 <= val <= 69:
    age_range_col.append('60-69')

for val in selec_df.gender:
  if val == 'Male' or val == 'Female':
    gender_col.append(0)
  elif val == 'Female':
    gender_col.append(1)
  else:
    gender_col.append(2)

for val in selec_df['avg time']:
  if val == 'Less than an Hour':
    using_time.append(0)
  elif val == 'Between 1 and 2 hours':
    using_time.append(1)
  elif val == 'Between 2 and 3 hours':
    using_time.append(2)
  elif val == 'Between 3 and 4 hours':
    using_time.append(3)
  elif val == 'Between 4 and 5 hours':
    using_time.append(4)
  elif val == 'More than 5 hours':
    using_time.append(5)

for val in selec_df['avg time']:
  if val == 'Less than an Hour' or val == 'Between 1 and 2 hours' or val == 'Between 2 and 3 hours':
    exposure_time.append(0)
  elif val == 'Between 3 and 4 hours' or val == 'Between 4 and 5 hours' or val == 'More than 5 hours':
    exposure_time.append(1)

for val in selec_df['relationship status']:
  if val == 'Single':
    relationship.append(0)
  elif val == 'In a relationship':
    relationship.append(1)
  elif val == 'Married':
    relationship.append(2)
  elif val == 'Divorced':
    relationship.append(4)

for val in selec_df['occupation status']:
  if val == 'School Student':
    occupation.append(0)
  elif val == 'University Student':
    occupation.append(1)
  elif val == 'Salaried Worker':
    occupation.append(2)
  elif val == 'Retired':
    occupation.append(4)

selec_df['age_range'] = age_range_col
selec_df['fix_gender'] = gender_col
selec_df['using_time'] = using_time
selec_df['exposure'] = exposure_time
selec_df['relationship'] = relationship
selec_df['occupation'] = occupation
selec_df['qol'] = (selec_df['depression'] + selec_df['sleeping problems'] + selec_df['activities'])
selec_df

"""#Calculation for data tables"""

# Pivot the DataFrame to get age as rows and gender as columns
table = selec_df.pivot_table(index='range_age', columns='fix_gender', aggfunc='size', fill_value=0)
table.loc['Total'] = table.sum()  # Add a summary row for each gender
table['Total'] = table.sum(axis=1)
# Display the resulting table
#table.to_csv("table_summary.csv")
print(table)

# Pivot the DataFrame to get age as rows and gender as columns
table = selec_df.pivot_table(index='avg time', columns='depression', aggfunc='size', fill_value=0)
table.loc['Total'] = table.sum()  # Add a summary row for each gender
table['Total'] = table.sum(axis=1)
# Display the resulting table
table.to_csv("table_summary.csv")
print(table)

more3 = selec_df[selec_df['using_time'] >= 3]
less3 = selec_df[selec_df['using_time'] < 3]

mask_all = less3
mask_depression = mask_all[mask_all['depression'] > 3]
mask_activity = mask_all[mask_all['activities'] > 3]
mask_sleep_prob = mask_all[mask_all['sleeping problems'] > 3]

# Pivot the DataFrame to get age as rows and gender as columns
table = mask_depression.pivot_table(index='range_age', columns='depression', aggfunc='size', fill_value=0)
table.loc['Total'] = table.sum()  # Add a summary row for each gender
table['Total'] = table.sum(axis=1)
# Display the resulting table
#table.to_csv("table_summary.csv")
print(table)

# Pivot the DataFrame to get age as rows and gender as columns
table = mask_activity.pivot_table(index='range_age', columns='activities', aggfunc='size', fill_value=0)
table.loc['Total'] = table.sum()  # Add a summary row for each gender
table['Total'] = table.sum(axis=1)
# Display the resulting table
table.to_csv("table_summary.csv")
print(table)

# Pivot the DataFrame to get age as rows and gender as columns
table = mask_sleep_prob.pivot_table(index='range_age', columns='sleeping problems', aggfunc='size', fill_value=0)
table.loc['Total'] = table.sum()  # Add a summary row for each gender
table['Total'] = table.sum(axis=1)
# Display the resulting table
table.to_csv("table_summary.csv")
print(table)

mask_depression_activity = mask_depression[mask_depression['activities'] > 3]
mask_depression_sleep_prob = mask_depression[mask_depression['sleeping problems'] > 3]
mask_sleep_prob_activity = mask_sleep_prob[mask_sleep_prob['activities'] > 3]

# Pivot the DataFrame to get age as rows and gender as columns
table = mask_depression_activity.pivot_table(index='range_age', columns='depression', aggfunc='size', fill_value=0)
table.loc['Total'] = table.sum()  # Add a summary row for each gender
table['Total'] = table.sum(axis=1)
# Display the resulting table
#table.to_csv("table_summary.csv")
print(table)

# Pivot the DataFrame to get age as rows and gender as columns
table = mask_depression_sleep_prob.pivot_table(index='range_age', columns='sleeping problems', aggfunc='size', fill_value=0)
table.loc['Total'] = table.sum()  # Add a summary row for each gender
table['Total'] = table.sum(axis=1)
# Display the resulting table
table.to_csv("table_summary.csv")
print(table)

# Pivot the DataFrame to get age as rows and gender as columns
table = mask_sleep_prob_activity.pivot_table(index='range_age', columns='sleeping problems', aggfunc='size', fill_value=0)
table.loc['Total'] = table.sum()  # Add a summary row for each gender
table['Total'] = table.sum(axis=1)
# Display the resulting table
table.to_csv("table_summary.csv")
print(table)

mask_depression_activity_sleep_prob = mask_depression_sleep_prob[mask_depression_sleep_prob['activities'] > 3]

# Pivot the DataFrame to get age as rows and gender as columns
table = mask_depression_activity_sleep_prob.pivot_table(index='range_age', columns='sleeping problems', aggfunc='size', fill_value=0)
table.loc['Total'] = table.sum()  # Add a summary row for each gender
table['Total'] = table.sum(axis=1)
# Display the resulting table
table.to_csv("table_summary.csv")
print(table)

"""#Graphs for statistics"""

age_range = np.array(selec_df['age_range'])
categories = ['10-19', '20-29', '30-39', '40-49', '50-59', '60-69']

age_range_cat = pd.Categorical(age_range, categories=categories, ordered=True)

counts, bins, patches = plt.hist(age_range_cat.codes, bins=np.arange(len(categories) + 1),
                                  color='skyblue', edgecolor='black', rwidth=0.8)

plt.xticks(np.arange(len(categories)) + 0.5, categories, rotation=45)
plt.ylabel('Amount')
plt.title('Age range')

total = counts.sum()
for i, count in enumerate(counts):
    percentage = (count / total) * 100
    bin_center = (bins[i] + bins[i + 1]) / 2
    plt.text(bin_center, count + 1, f'{percentage:.1f}%', ha='center')

plt.show()

gender_for_hist = []
for val in selec_df.gender:
  if val == 'Male' or val == 'Female':
    gender_for_hist.append(val)
  else:
    gender_for_hist.append('Undefined')

selec_df['gender_for_hist'] = gender_for_hist
gender = np.array(selec_df['gender_for_hist'])
categories = ['Male', 'Female', 'Undefined']

gender_cat = pd.Categorical(gender, categories=categories, ordered=True)

counts, bins, patches = plt.hist(gender_cat.codes, bins=np.arange(len(categories) + 1),
                                  color='skyblue', edgecolor='black', rwidth=0.8)

plt.xticks(np.arange(len(categories)) + 0.5, categories, rotation=45)
plt.ylabel('Amount')
plt.title('Gender')

total = counts.sum()
for i, count in enumerate(counts):
    percentage = (count / total) * 100
    bin_center = (bins[i] + bins[i + 1]) / 2
    plt.text(bin_center, count + 1, f'{percentage:.1f}%', ha='center')

plt.show()

categories = ['Less than an Hour', 'Between 1 and 2 hours', 'Between 2 and 3 hours',
              'Between 3 and 4 hours', 'Between 4 and 5 hours', 'More than 5 hours']
selec_df['avg time'] = pd.Categorical(selec_df['avg time'], categories=categories, ordered=True)
avg_qol_per_time = selec_df.groupby('avg time')['qol'].mean().reset_index()

plt.figure(figsize=(8, 6))
bars = plt.bar(avg_qol_per_time['avg time'], avg_qol_per_time['qol'], color='skyblue', edgecolor='black')

for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval + 0.05, f'{yval:.2f}', ha='center', va='bottom')

plt.xlabel('Using Time')
plt.ylabel('Average Quality of Life')
plt.title('Average Quality of Life by Social Media Usage Time')
plt.xticks(rotation=45)

plt.show()

occupation = np.array(selec_df['occupation status'])
categories = ['School Student', 'University Student', 'Salaried Worker', 'Retired']

occupation_cat = pd.Categorical(occupation, categories=categories, ordered=True)
counts, bins, patches = plt.hist(occupation_cat.codes, bins=np.arange(len(categories) + 1),
                                  color='skyblue', edgecolor='black', rwidth=0.8)

plt.xticks(np.arange(len(categories)) + 0.5, categories, rotation=45)
plt.ylabel('Amount')
plt.title('Occupation status')

total = counts.sum()
for i, count in enumerate(counts):
    percentage = (count / total) * 100
    bin_center = (bins[i] + bins[i + 1]) / 2
    plt.text(bin_center, count + 1, f'{percentage:.1f}%', ha='center')

plt.show()

avg_qol_per_time = selec_df.groupby('avg time')['qol'].mean().reset_index()

plt.figure(figsize=(8, 6))
plt.bar(avg_qol_per_time['avg time'], avg_qol_per_time['qol'], color='skyblue', edgecolor='black')

plt.xlabel('Avg time')
plt.ylabel('Average Quality of Life')
plt.title('Average Quality of Life by Social Media Usage Time')
plt.xticks(rotation=45)

plt.show()

selec_df.info()

selec_df.columns

df_corr = selec_df.copy()
df_corr = df_corr[['age', 'fix_gender', 'relationship', 'occupation', 'using_time',
                   'depression', 'activities', 'sleeping problems', 'qol']]

correlation_matrix = df_corr.corr()

plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1, linewidths=0.5)

plt.title('Correlation Matrix')
plt.show()

"""#Matching"""

def matching(data):
  def matching_ate(data):
      covariates = ['relationship', 'fix_gender', 'occupation']
      log_reg = LogisticRegression()
      log_reg.fit(data[covariates], data['exposure'])
      data['propensity_score'] = log_reg.predict_proba(data[covariates])[:, 1]

      treated = data[data['exposure'] == 1]
      control = data[data['exposure'] == 0]
      nn = NearestNeighbors(n_neighbors=1)
      nn.fit(control[['propensity_score']])
      distances, indices = nn.kneighbors(treated[['propensity_score']])
      matched_control = control.iloc[indices.flatten()]

      ATE = (treated['qol'].values - matched_control['qol'].values).mean()
      return ATE

  bootstrap_ates = []
  n_iterations = 1000
  np.random.seed(42)

  for i in range(n_iterations):
      sample = data.sample(frac=1, replace=True)
      bootstrap_ate = matching_ate(sample)
      bootstrap_ates.append(bootstrap_ate)

  lower_bound = np.percentile(bootstrap_ates, 2.5)
  upper_bound = np.percentile(bootstrap_ates, 97.5)

  return np.mean(bootstrap_ates), lower_bound, upper_bound

"""#Linear regression"""

import statsmodels.api as sm

def regression(data):
  def regression_ate(data):
      data['intercept'] = 1
      model = sm.OLS(data['qol'], data[['intercept', 'exposure', 'relationship', 'fix_gender', 'occupation']])
      results = model.fit()
      return results.params['exposure']

  bootstrap_ates_reg = []
  n_iterations = 1000

  for i in range(n_iterations):
      sample = data.sample(frac=1, replace=True)
      bootstrap_ate_reg = regression_ate(sample)
      bootstrap_ates_reg.append(bootstrap_ate_reg)

  lower_bound_reg = np.percentile(bootstrap_ates_reg, 2.5)
  upper_bound_reg = np.percentile(bootstrap_ates_reg, 97.5)

  return np.mean(bootstrap_ates_reg), lower_bound_reg, upper_bound_reg

"""#Run"""

age_range.pop()
age_range.pop()
print(age_range)
for age in age_range:
  data = selec_df.copy()
  data = data[data.age_range == age]
  mean_bootstrap_ates, lower_bound, upper_bound = matching(data)

  print(age)
  print(f"ATE (Matching): {mean_bootstrap_ates}")
  print(f"95% Confidence Interval (Bootstrap): ({lower_bound}, {upper_bound})")
  print("")

  bootstrap_ates_reg, lower_bound_reg, upper_bound_reg = regression(data)

  print(f"ATE (Regression): {bootstrap_ates_reg}")
  print(f"95% Confidence Interval (Bootstrap): ({lower_bound_reg}, {upper_bound_reg})")
  print("")

old_age_range = ['50-59', '60-69']
print(old_age_range)
for age in old_age_range:
  data = selec_df.copy()
  data = data[data.age_range == age]

  bootstrap_ates_reg, lower_bound_reg, upper_bound_reg = regression(data)

  print(f"ATE (Regression): {bootstrap_ates_reg}")
  print(f"95% Confidence Interval (Bootstrap): ({lower_bound_reg}, {upper_bound_reg})")
  print("")